// Copyright 2024-2025 Lie Yan

import AppKit
import Foundation
import Testing
import _RopeModule

@testable import Rohan

final class InsertStringTests: TextKitTestsBase {
  init() throws {
    try super.init(createFolder: false)
  }

  @Test
  func test_insertString_emptyRoot() throws {
    let documentManager = {
      let rootNode = RootNode([])
      return createDocumentManager(rootNode)
    }()
    // insert
    let range = RhTextRange(TextLocation([], 0))
    let string: BigString = "Hello, World!"
    let (range1, deleted1) =
      DMUtils.replaceCharacters(in: range, with: string, documentManager)
    #expect("\(range1)" == "[0â†“,0â†“]:0..<[0â†“,0â†“]:13")
    #expect(
      documentManager.prettyPrint() == """
        root
        â”” paragraph
          â”” text "Hello, World!"
        """)

    // revert
    let (range2, deleted2) =
      DMUtils.replaceContents(in: range1, with: deleted1, documentManager)
    #expect("\(range2)" == "[0â†“]:0")
    #expect(
      documentManager.prettyPrint() == """
        root
        â”” paragraph
        """)
  }

  @Test
  func test_insertString_TextNode() throws {
    let documentManager = {
      let rootNode = RootNode([
        HeadingNode(level: 1, [EmphasisNode([TextNode("Newton'sðŸ˜€")])])
      ])
      return createDocumentManager(rootNode)
    }()

    // insert in the middle of a text node
    let range = {
      let indices: [RohanIndex] = [
        .index(0),  // heading
        .index(0),  // emphasis
        .index(0),  // text
      ]
      let offset = "Newton's".count
      return RhTextRange(TextLocation(indices, offset))
    }()
    let string: BigString = " Second Law of Motion"

    let (range1, deleted1) =
      DMUtils.replaceCharacters(in: range, with: string, documentManager)
    #expect("\(range1)" == "[0â†“,0â†“,0â†“]:8..<[0â†“,0â†“,0â†“]:29")
    #expect(
      documentManager.prettyPrint() == """
        root
        â”” heading
          â”” emphasis
            â”” text "Newton's Second Law of MotionðŸ˜€"
        """)

    // revert
    let (range2, deleted2) =
      DMUtils.replaceContents(in: range1, with: deleted1, documentManager)
    #expect("\(range2)" == "[0â†“,0â†“,0â†“]:8")
    #expect(
      documentManager.prettyPrint() == """
        root
        â”” heading
          â”” emphasis
            â”” text "Newton'sðŸ˜€"
        """)
  }

  @Test
  func test_insertString_RootNode() throws {
    let documentManager = {
      let rootNode = RootNode([
        HeadingNode(level: 1, []),
        ParagraphNode([EmphasisNode([TextNode("over ")])]),
      ])
      return createDocumentManager(rootNode)
    }()

    var rangeStack: [(InsertionRange, [Node])] = []
    // insert
    do {
      let range = RhTextRange(TextLocation([], 1))
      let (range1, deleted1) =
        DMUtils.replaceCharacters(in: range, with: "fox ", documentManager)
      rangeStack.append((range1, deleted1))
      #expect("\(range1)" == "[1â†“,0â†“]:0..<[1â†“,0â†“]:4")
    }
    do {
      let range = RhTextRange(TextLocation([], 1))
      let string: BigString = "The quick brown "
      let (range1, deleted1) =
        DMUtils.replaceCharacters(in: range, with: string, documentManager)
      rangeStack.append((range1, deleted1))
      #expect("\(range1)" == "[1â†“,0â†“]:0..<[1â†“,0â†“]:16")
    }
    do {
      let range = RhTextRange(TextLocation([], 2))
      let string: BigString = "the lazy dog."
      let (range1, deleted1) =
        DMUtils.replaceCharacters(in: range, with: string, documentManager)
      rangeStack.append((range1, deleted1))
      #expect("\(range1)" == "[1â†“,2â†“]:0..<[1â†“,2â†“]:13")
    }
    #expect(
      documentManager.prettyPrint() == """
        root
        â”œ heading
        â”” paragraph
          â”œ text "The quick brown fox "
          â”œ emphasis
          â”‚ â”” text "over "
          â”” text "the lazy dog."
        """)

    // revert
    var range2: InsertionRange? = nil
    for (range, deleted) in rangeStack.reversed() {
      let (insertionRange, _) =
        DMUtils.replaceContents(in: range, with: deleted, documentManager)
      range2 = insertionRange
    }
    #expect("\(range2!)" == "[1â†“]:0")
    #expect(
      documentManager.prettyPrint() == """
        root
        â”œ heading
        â”” paragraph
          â”” emphasis
            â”” text "over "
        """)
  }

  @Test
  func test_insertString_EquationNode() throws {
    let documentManager = {
      let rootNode = RootNode([
        ParagraphNode([
          EquationNode(
            isBlock: true,
            nucleus: [
              TextNode("=m"),
              FractionNode(numerator: [TextNode("d")], denominator: [TextNode("dt")]),
            ])
        ])
      ])
      return createDocumentManager(rootNode)
    }()

    var rangeStack: [(InsertionRange, [Node])] = []
    do {
      let range = {
        let indices: [RohanIndex] = [
          .index(0),  // paragraph
          .index(0),  // equation
          .mathIndex(.nucleus),  // nucleus
        ]
        return RhTextRange(TextLocation(indices, 0))
      }()
      let (range1, deleted1) =
        DMUtils.replaceCharacters(in: range, with: "F", documentManager)
      rangeStack.append((range1, deleted1))
      #expect("\(range1)" == "[0â†“,0â†“,nucleus,0â†“]:0..<[0â†“,0â†“,nucleus,0â†“]:1")
    }
    do {
      let range = {
        let indices: [RohanIndex] = [
          .index(0),  // paragraph
          .index(0),  // equation
          .mathIndex(.nucleus),  // nucleus
          .index(1),  // fraction
          .mathIndex(.numerator),  // numerator
        ]
        return RhTextRange(TextLocation(indices, 1))
      }()
      let (range1, deleted1) =
        DMUtils.replaceCharacters(in: range, with: "v", documentManager)
      rangeStack.append((range1, deleted1))
      #expect(
        "\(range1)"
          == "[0â†“,0â†“,nucleus,1â†“,numerator,0â†“]:1..<[0â†“,0â†“,nucleus,1â†“,numerator,0â†“]:2")
    }
    do {
      let range = {
        let indices: [RohanIndex] = [
          .index(0),  // paragraph
          .index(0),  // equation
          .mathIndex(.nucleus),  // nucleus
        ]
        return RhTextRange(TextLocation(indices, 2))
      }()
      let (range1, deleted1) =
        DMUtils.replaceCharacters(in: range, with: ".", documentManager)
      rangeStack.append((range1, deleted1))
      #expect("\(range1)" == "[0â†“,0â†“,nucleus,2â†“]:0..<[0â†“,0â†“,nucleus,2â†“]:1")
    }
    #expect(
      documentManager.prettyPrint() == """
        root
        â”” paragraph
          â”” equation
            â”” nucleus
              â”œ text "F=m"
              â”œ fraction
              â”‚ â”œ numerator
              â”‚ â”‚ â”” text "dv"
              â”‚ â”” denominator
              â”‚   â”” text "dt"
              â”” text "."
        """)

    // revert
    var range2: InsertionRange? = nil
    for (range, deleted) in rangeStack.reversed() {
      let (insertionRange, _) =
        DMUtils.replaceContents(in: range, with: deleted, documentManager)
      range2 = insertionRange
    }
    #expect("\(range2!)" == "[0â†“,0â†“,nucleus,0â†“]:0")
    #expect(
      documentManager.prettyPrint() == """
        root
        â”” paragraph
          â”” equation
            â”” nucleus
              â”œ text "=m"
              â”” fraction
                â”œ numerator
                â”‚ â”” text "d"
                â”” denominator
                  â”” text "dt"
        """)
  }

  @Test
  func test_insertString_ElementNode() {
    let documentManager = {
      let rootNode = RootNode([
        ParagraphNode([
          TextNode("The "),
          EmphasisNode([TextNode("brown ")]),
          EquationNode(isBlock: false, nucleus: [TextNode("jumps ")]),
          TextNode("the lazy dog."),
        ])
      ])
      return createDocumentManager(rootNode)
    }()

    // insert
    func locationInParagraph(_ index: Int) -> RhTextRange {
      let path: [RohanIndex] = [
        .index(0)  // paragraph
      ]
      return RhTextRange(TextLocation(path, index))
    }

    var rangeStack: [(InsertionRange, [Node])] = []

    do {
      let range = locationInParagraph(3)
      let (range1, deleted1) =
        DMUtils.replaceCharacters(in: range, with: "over ", documentManager)
      rangeStack.append((range1, deleted1))
      #expect("\(range1)" == "[0â†“,3â†“]:0..<[0â†“,3â†“]:5")
    }
    do {
      let range = locationInParagraph(2)
      let (range1, deleted1) =
        DMUtils.replaceCharacters(in: range, with: "fox ", documentManager)
      rangeStack.append((range1, deleted1))
      #expect("\(range1)" == "[0â†“,2â†“]:0..<[0â†“,2â†“]:4")
    }
    do {
      let range = locationInParagraph(1)
      let (range1, deleted1) =
        DMUtils.replaceCharacters(in: range, with: "quick ", documentManager)
      rangeStack.append((range1, deleted1))
      #expect("\(range1)" == "[0â†“,0â†“]:4..<[0â†“,0â†“]:10")
    }
    #expect(
      documentManager.prettyPrint() == """
        root
        â”” paragraph
          â”œ text "The quick "
          â”œ emphasis
          â”‚ â”” text "brown "
          â”œ text "fox "
          â”œ equation
          â”‚ â”” nucleus
          â”‚   â”” text "jumps "
          â”” text "over the lazy dog."
        """
    )

    // revert
    var range2: InsertionRange? = nil
    for (range, deleted) in rangeStack.reversed() {
      let (insertionRange, _) =
        DMUtils.replaceContents(in: range, with: deleted, documentManager)
      range2 = insertionRange
    }
    #expect("\(range2!)" == "[0â†“,3â†“]:0")
    #expect(
      documentManager.prettyPrint() == """
        root
        â”” paragraph
          â”œ text "The "
          â”œ emphasis
          â”‚ â”” text "brown "
          â”œ equation
          â”‚ â”” nucleus
          â”‚   â”” text "jumps "
          â”” text "the lazy dog."
        """)
  }

  @Test
  func test_insertString_ApplyNode_doubleText() {
    let documentManager = {
      let rootNode = RootNode([
        ParagraphNode([
          ApplyNode(
            CompiledSamples.doubleText,
            [
              [ApplyNode(CompiledSamples.doubleText, [[TextNode("fox")]])!]
            ])!
        ])
      ])
      return createDocumentManager(rootNode)
    }()

    // insert
    let range = {
      let indices: [RohanIndex] = [
        .index(0),  // paragraph
        .index(0),  // apply node
        .argumentIndex(0),  // first argument
        .index(0),  // nested apply node
        .argumentIndex(0),  // first argument
        .index(0),  // text
      ]
      let offset = "fox".count
      return RhTextRange(TextLocation(indices, offset))
    }()
    let (range1, deleted1) =
      DMUtils.replaceCharacters(in: range, with: "pro", documentManager)
    #expect("\(range1)" == "[0â†“,0â†“,0â‡’,0â†“,0â‡’,0â†“]:3..<[0â†“,0â†“,0â‡’,0â†“,0â‡’,0â†“]:6")
    #expect(
      documentManager.prettyPrint() == """
        root
        â”” paragraph
          â”” template(doubleText)
            â”œ argument #0 (x2)
            â”” content
              â”œ text "{"
              â”œ variable #0
              â”‚ â”” template(doubleText)
              â”‚   â”œ argument #0 (x2)
              â”‚   â”” content
              â”‚     â”œ text "{"
              â”‚     â”œ variable #0
              â”‚     â”‚ â”” text "foxpro"
              â”‚     â”œ text " and "
              â”‚     â”œ emphasis
              â”‚     â”‚ â”” variable #0
              â”‚     â”‚   â”” text "foxpro"
              â”‚     â”” text "}"
              â”œ text " and "
              â”œ emphasis
              â”‚ â”” variable #0
              â”‚   â”” template(doubleText)
              â”‚     â”œ argument #0 (x2)
              â”‚     â”” content
              â”‚       â”œ text "{"
              â”‚       â”œ variable #0
              â”‚       â”‚ â”” text "foxpro"
              â”‚       â”œ text " and "
              â”‚       â”œ emphasis
              â”‚       â”‚ â”” variable #0
              â”‚       â”‚   â”” text "foxpro"
              â”‚       â”” text "}"
              â”” text "}"
        """)

    // revert
    let (range2, _) =
      DMUtils.replaceContents(in: range1, with: deleted1, documentManager)
    #expect("\(range2)" == "[0â†“,0â†“,0â‡’,0â†“,0â‡’,0â†“]:3")
    #expect(
      documentManager.prettyPrint() == """
        root
        â”” paragraph
          â”” template(doubleText)
            â”œ argument #0 (x2)
            â”” content
              â”œ text "{"
              â”œ variable #0
              â”‚ â”” template(doubleText)
              â”‚   â”œ argument #0 (x2)
              â”‚   â”” content
              â”‚     â”œ text "{"
              â”‚     â”œ variable #0
              â”‚     â”‚ â”” text "fox"
              â”‚     â”œ text " and "
              â”‚     â”œ emphasis
              â”‚     â”‚ â”” variable #0
              â”‚     â”‚   â”” text "fox"
              â”‚     â”” text "}"
              â”œ text " and "
              â”œ emphasis
              â”‚ â”” variable #0
              â”‚   â”” template(doubleText)
              â”‚     â”œ argument #0 (x2)
              â”‚     â”” content
              â”‚       â”œ text "{"
              â”‚       â”œ variable #0
              â”‚       â”‚ â”” text "fox"
              â”‚       â”œ text " and "
              â”‚       â”œ emphasis
              â”‚       â”‚ â”” variable #0
              â”‚       â”‚   â”” text "fox"
              â”‚       â”” text "}"
              â”” text "}"
        """)
  }

  @Test
  func test_insertString_ApplyNode_complexFraction() {
    let documentManager = {
      let rootNode = RootNode([
        HeadingNode(
          level: 1,
          [
            EquationNode(
              isBlock: false,
              nucleus: [
                TextNode("m+"),
                ApplyNode(
                  CompiledSamples.complexFraction, [[TextNode("x")], [TextNode("y")]])!,
                TextNode("+n"),
              ])
          ])
      ])
      return createDocumentManager(rootNode)
    }()

    // insert
    let range = {
      let indices: [RohanIndex] = [
        .index(0),  // heading
        .index(0),  // equation
        .mathIndex(.nucleus),  // nucleus
        .index(1),  // apply node
        .argumentIndex(1),  // second argument
        .index(0),  // text
      ]
      return RhTextRange(TextLocation(indices, 0))
    }()
    let (range1, deleted1) =
      DMUtils.replaceCharacters(in: range, with: "1+", documentManager)
    #expect("\(range1)" == "[0â†“,0â†“,nucleus,1â†“,1â‡’,0â†“]:0..<[0â†“,0â†“,nucleus,1â†“,1â‡’,0â†“]:2")
    #expect(
      documentManager.prettyPrint() == """
        root
        â”” heading
          â”” equation
            â”” nucleus
              â”œ text "m+"
              â”œ template(complexFraction)
              â”‚ â”œ argument #0 (x2)
              â”‚ â”œ argument #1 (x2)
              â”‚ â”” content
              â”‚   â”” fraction
              â”‚     â”œ numerator
              â”‚     â”‚ â”” fraction
              â”‚     â”‚   â”œ numerator
              â”‚     â”‚   â”‚ â”œ variable #1
              â”‚     â”‚   â”‚ â”‚ â”” text "1+y"
              â”‚     â”‚   â”‚ â”” text "+1"
              â”‚     â”‚   â”” denominator
              â”‚     â”‚     â”œ variable #0
              â”‚     â”‚     â”‚ â”” text "x"
              â”‚     â”‚     â”” text "+1"
              â”‚     â”” denominator
              â”‚       â”œ variable #0
              â”‚       â”‚ â”” text "x"
              â”‚       â”œ text "+"
              â”‚       â”œ variable #1
              â”‚       â”‚ â”” text "1+y"
              â”‚       â”” text "+1"
              â”” text "+n"
        """)

    // revert
    let (range2, _) =
      DMUtils.replaceContents(in: range1, with: deleted1, documentManager)
    #expect("\(range2)" == "[0â†“,0â†“,nucleus,1â†“,1â‡’,0â†“]:0")
    #expect(
      documentManager.prettyPrint() == """
        root
        â”” heading
          â”” equation
            â”” nucleus
              â”œ text "m+"
              â”œ template(complexFraction)
              â”‚ â”œ argument #0 (x2)
              â”‚ â”œ argument #1 (x2)
              â”‚ â”” content
              â”‚   â”” fraction
              â”‚     â”œ numerator
              â”‚     â”‚ â”” fraction
              â”‚     â”‚   â”œ numerator
              â”‚     â”‚   â”‚ â”œ variable #1
              â”‚     â”‚   â”‚ â”‚ â”” text "y"
              â”‚     â”‚   â”‚ â”” text "+1"
              â”‚     â”‚   â”” denominator
              â”‚     â”‚     â”œ variable #0
              â”‚     â”‚     â”‚ â”” text "x"
              â”‚     â”‚     â”” text "+1"
              â”‚     â”” denominator
              â”‚       â”œ variable #0
              â”‚       â”‚ â”” text "x"
              â”‚       â”œ text "+"
              â”‚       â”œ variable #1
              â”‚       â”‚ â”” text "y"
              â”‚       â”” text "+1"
              â”” text "+n"
        """)
  }

  @Test
  func test_insertString_ApplyNode_bifun() {
    let documentManager = {
      let rootNode = RootNode([
        ParagraphNode([
          EquationNode(
            isBlock: true,
            nucleus: [
              ApplyNode(
                CompiledSamples.bifun,
                [
                  [ApplyNode(CompiledSamples.bifun, [[TextNode("n+1")]])!]
                ])!
            ])
        ])
      ])
      return createDocumentManager(rootNode)
    }()

    // insert
    let range = {
      let indices: [RohanIndex] = [
        .index(0),  // paragraph
        .index(0),  // equation
        .mathIndex(.nucleus),  // nucleus
        .index(0),  // apply node
        .argumentIndex(0),  // first argument
        .index(0),  // apply node
        .argumentIndex(0),  // first argument
        .index(0),
      ]
      return RhTextRange(TextLocation(indices, "n".stringLength))
    }()
    let (range1, deleted1) =
      DMUtils.replaceCharacters(in: range, with: "-k", documentManager)
    #expect(
      "\(range1)" == "[0â†“,0â†“,nucleus,0â†“,0â‡’,0â†“,0â‡’,0â†“]:1..<[0â†“,0â†“,nucleus,0â†“,0â‡’,0â†“,0â‡’,0â†“]:3"
    )
    #expect(
      documentManager.prettyPrint() == """
        root
        â”” paragraph
          â”” equation
            â”” nucleus
              â”” template(bifun)
                â”œ argument #0 (x2)
                â”” content
                  â”œ text "f("
                  â”œ variable #0
                  â”‚ â”” template(bifun)
                  â”‚   â”œ argument #0 (x2)
                  â”‚   â”” content
                  â”‚     â”œ text "f("
                  â”‚     â”œ variable #0
                  â”‚     â”‚ â”” text "n-k+1"
                  â”‚     â”œ text ","
                  â”‚     â”œ variable #0
                  â”‚     â”‚ â”” text "n-k+1"
                  â”‚     â”” text ")"
                  â”œ text ","
                  â”œ variable #0
                  â”‚ â”” template(bifun)
                  â”‚   â”œ argument #0 (x2)
                  â”‚   â”” content
                  â”‚     â”œ text "f("
                  â”‚     â”œ variable #0
                  â”‚     â”‚ â”” text "n-k+1"
                  â”‚     â”œ text ","
                  â”‚     â”œ variable #0
                  â”‚     â”‚ â”” text "n-k+1"
                  â”‚     â”” text ")"
                  â”” text ")"
        """)

    // revert
    let (range2, _) =
      DMUtils.replaceContents(in: range1, with: deleted1, documentManager)
    #expect("\(range2)" == "[0â†“,0â†“,nucleus,0â†“,0â‡’,0â†“,0â‡’,0â†“]:1")
    #expect(
      documentManager.prettyPrint() == """
        root
        â”” paragraph
          â”” equation
            â”” nucleus
              â”” template(bifun)
                â”œ argument #0 (x2)
                â”” content
                  â”œ text "f("
                  â”œ variable #0
                  â”‚ â”” template(bifun)
                  â”‚   â”œ argument #0 (x2)
                  â”‚   â”” content
                  â”‚     â”œ text "f("
                  â”‚     â”œ variable #0
                  â”‚     â”‚ â”” text "n+1"
                  â”‚     â”œ text ","
                  â”‚     â”œ variable #0
                  â”‚     â”‚ â”” text "n+1"
                  â”‚     â”” text ")"
                  â”œ text ","
                  â”œ variable #0
                  â”‚ â”” template(bifun)
                  â”‚   â”œ argument #0 (x2)
                  â”‚   â”” content
                  â”‚     â”œ text "f("
                  â”‚     â”œ variable #0
                  â”‚     â”‚ â”” text "n+1"
                  â”‚     â”œ text ","
                  â”‚     â”œ variable #0
                  â”‚     â”‚ â”” text "n+1"
                  â”‚     â”” text ")"
                  â”” text ")"
        """)
  }
}
