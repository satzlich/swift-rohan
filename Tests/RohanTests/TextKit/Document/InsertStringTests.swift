// Copyright 2024-2025 Lie Yan

import AppKit
import Foundation
import Testing

@testable import Rohan

final class InsertStringTests: TextKitTestsBase {
  init() throws {
    try super.init(createFolder: false)
  }

  @Test
  func testInsertString_EmptyRoot() throws {
    let rootNode = RootNode([])
    let documentManager = createDocumentManager(rootNode)

    let location = TextLocation([], 0)
    let range = RhTextRange(location)
    let result = documentManager.replaceCharacters(in: range, with: "Hello, World!")
    assert(result.isSuccess)
    let insertionRange = result.success()!
    #expect("\(insertionRange.location)" == "[0â†“,0â†“]:0")
    #expect(
      documentManager.prettyPrint() == """
        root
        â”” paragraph
          â”” text "Hello, World!"
        """)
  }

  @Test
  func testInsertString() throws {
    let rootNode = RootNode([
      HeadingNode(
        level: 1,
        [
          EmphasisNode([TextNode("Newton'sðŸ˜€")])
        ]),
      ParagraphNode([
        EquationNode(
          isBlock: true,
          nucleus: [
            TextNode("=m"),
            FractionNode(numerator: [TextNode("d")], denominator: [TextNode("dt")]),
          ])
      ]),
    ])

    let documentManager = createDocumentManager(rootNode)

    // check document
    #expect(
      documentManager.prettyPrint() == """
        root
        â”œ heading
        â”‚ â”” emphasis
        â”‚   â”” text "Newton'sðŸ˜€"
        â”” paragraph
          â”” equation
            â”” nucleus
              â”œ text "=m"
              â”” fraction
                â”œ numerator
                â”‚ â”” text "d"
                â”” denominator
                  â”” text "dt"
        """)

    // do insertion in the middle of a text node
    do {
      let path: [RohanIndex] = [
        .index(0),  // heading
        .index(0),  // emphasis
        .index(0),  // text "Newton's"
      ]
      let offset = "Newton's".count
      let range = RhTextRange(TextLocation(path, offset))
      let result = documentManager.replaceCharacters(
        in: range, with: " Second Law of Motion")
      assert(result.isSuccess)
      let insertionRange = result.success()!
      #expect("\(insertionRange.location)" == "[0â†“,0â†“,0â†“]:8")
    }

    // check document
    #expect(
      documentManager.prettyPrint() == """
        root
        â”œ heading
        â”‚ â”” emphasis
        â”‚   â”” text "Newton's Second Law of MotionðŸ˜€"
        â”” paragraph
          â”” equation
            â”” nucleus
              â”œ text "=m"
              â”” fraction
                â”œ numerator
                â”‚ â”” text "d"
                â”” denominator
                  â”” text "dt"
        """)

    // do insertion in the root
    do {
      let location = TextLocation([], 1)
      let range = RhTextRange(location)
      let result = documentManager.replaceCharacters(in: range, with: "states:")
      #expect(result.isSuccess)
      let insertionRange = result.success()!
      #expect("\(insertionRange.location)" == "[1â†“,0â†“]:0")
    }
    do {
      let location = TextLocation([], 1)
      let range = RhTextRange(location)
      let result = documentManager.replaceCharacters(
        in: range, with: "The law of motion ")
      #expect(result.isSuccess)
      let insertionRange = result.success()!
      #expect("\(insertionRange.location)" == "[1â†“,0â†“]:0")
    }
    do {
      let location = TextLocation([], 2)
      let range = RhTextRange(location)
      let result = documentManager.replaceCharacters(in: range, with: "Veni. Vidi. Vici.")
      #expect(result.isSuccess)
      let insertionRange = result.success()!
      #expect("\(insertionRange.location)" == "[1â†“,2â†“]:0")
    }
    // check document
    #expect(
      documentManager.prettyPrint() == """
        root
        â”œ heading
        â”‚ â”” emphasis
        â”‚   â”” text "Newton's Second Law of MotionðŸ˜€"
        â”” paragraph
          â”œ text "The law of motion states:"
          â”œ equation
          â”‚ â”” nucleus
          â”‚   â”œ text "=m"
          â”‚   â”” fraction
          â”‚     â”œ numerator
          â”‚     â”‚ â”” text "d"
          â”‚     â”” denominator
          â”‚       â”” text "dt"
          â”” text "Veni. Vidi. Vici."
        """)

    // do insertion in the equation
    do {
      let path: [RohanIndex] = [
        .index(1),  // paragraph
        .index(1),  // equation
        .mathIndex(.nucleus),  // nucleus
      ]
      let range = RhTextRange(TextLocation(path, 0))
      let result = documentManager.replaceCharacters(in: range, with: "F")
      #expect(result.isSuccess)
      let insertionRange = result.success()!
      #expect("\(insertionRange.location)" == "[1â†“,1â†“,nucleus,0â†“]:0")
    }
    do {
      let path: [RohanIndex] = [
        .index(1),  // paragraph
        .index(1),  // equation
        .mathIndex(.nucleus),  // nucleus
        .index(1),  // fraction
        .mathIndex(.numerator),  // numerator
      ]
      let range = RhTextRange(TextLocation(path, 1))
      let result = documentManager.replaceCharacters(in: range, with: "v")
      #expect(result.isSuccess)
      let insertionRange = result.success()!
      #expect("\(insertionRange.location)" == "[1â†“,1â†“,nucleus,1â†“,numerator,0â†“]:1")
    }
    do {
      let path: [RohanIndex] = [
        .index(1),  // paragraph
        .index(1),  // equation
        .mathIndex(.nucleus),  // nucleus
      ]
      let range = RhTextRange(TextLocation(path, 2))
      let result = documentManager.replaceCharacters(in: range, with: ".")
      #expect(result.isSuccess)
      let insertionRange = result.success()!
      #expect("\(insertionRange.location)" == "[1â†“,1â†“,nucleus,2â†“]:0")
    }

    // check document
    #expect(
      documentManager.prettyPrint() == """
        root
        â”œ heading
        â”‚ â”” emphasis
        â”‚   â”” text "Newton's Second Law of MotionðŸ˜€"
        â”” paragraph
          â”œ text "The law of motion states:"
          â”œ equation
          â”‚ â”” nucleus
          â”‚   â”œ text "F=m"
          â”‚   â”œ fraction
          â”‚   â”‚ â”œ numerator
          â”‚   â”‚ â”‚ â”” text "dv"
          â”‚   â”‚ â”” denominator
          â”‚   â”‚   â”” text "dt"
          â”‚   â”” text "."
          â”” text "Veni. Vidi. Vici."
        """)
  }

  @Test
  func testInsertString_ElementNode() throws {
    let rootNode = RootNode([
      ParagraphNode([
        TextNode("The "),
        EmphasisNode([TextNode("brown ")]),
        EquationNode(isBlock: false, nucleus: [TextNode("jumps ")]),
        TextNode("the lazy dog."),
      ])
    ])
    let documentManager = createDocumentManager(rootNode)

    do {
      let path: [RohanIndex] = [
        .index(0)  // paragraph
      ]
      let range = RhTextRange(TextLocation(path, 3))
      let result = documentManager.replaceCharacters(in: range, with: "over ")
      #expect(result.isSuccess)
      let insertionRange = result.success()!
      #expect("\(insertionRange.location)" == "[0â†“,3â†“]:0")
    }

    do {
      let path: [RohanIndex] = [
        .index(0)  // paragraph
      ]
      let range = RhTextRange(TextLocation(path, 2))
      let result = documentManager.replaceCharacters(in: range, with: "fox ")
      #expect(result.isSuccess)
      let insertionRange = result.success()!
      #expect("\(insertionRange.location)" == "[0â†“,2â†“]:0")
    }

    do {
      let path: [RohanIndex] = [
        .index(0)  // paragraph
      ]
      let range = RhTextRange(TextLocation(path, 1))
      let result = documentManager.replaceCharacters(in: range, with: "quick ")
      #expect(result.isSuccess)
      let insertionRange = result.success()!
      #expect("\(insertionRange.location)" == "[0â†“,0â†“]:4")
    }

    #expect(
      documentManager.prettyPrint() == """
        root
        â”” paragraph
          â”œ text "The quick "
          â”œ emphasis
          â”‚ â”” text "brown "
          â”œ text "fox "
          â”œ equation
          â”‚ â”” nucleus
          â”‚   â”” text "jumps "
          â”” text "over the lazy dog."
        """)
  }

  @Test
  func testInsertString_ApplyNode() throws {
    let rootNode = RootNode([
      ParagraphNode([
        TextNode("Sample of nested apply nodes: "),
        ApplyNode(
          CompiledSamples.doubleText,
          [
            [ApplyNode(CompiledSamples.doubleText, [[TextNode("fox")]])!]
          ])!,
      ]),
      HeadingNode(
        level: 1,
        [
          EquationNode(
            isBlock: false,
            nucleus: [
              TextNode("m+"),
              ApplyNode(
                CompiledSamples.complexFraction, [[TextNode("x")], [TextNode("y")]])!,
              TextNode("+n"),
            ])
        ]),
      ParagraphNode([
        EquationNode(
          isBlock: true,
          nucleus: [
            ApplyNode(
              CompiledSamples.bifun,
              [
                [ApplyNode(CompiledSamples.bifun, [[TextNode("n+1")]])!]
              ])!
          ])
      ]),
    ])

    let documentManager = createDocumentManager(rootNode)
    do {
      let path: [RohanIndex] = [
        .index(0),  // paragraph
        .index(1),  // apply node
        .argumentIndex(0),  // first argument
        .index(0),  // nested apply node
        .argumentIndex(0),  // first argument
        .index(0),  // text
      ]
      let offset = "fox".count
      let range = RhTextRange(TextLocation(path, offset))
      let result = documentManager.replaceCharacters(in: range, with: "pro")
      #expect(result.isSuccess)
      let insertionRange = result.success()!
      #expect("\(insertionRange.location)" == "[0â†“,1â†“,0â‡’,0â†“,0â‡’,0â†“]:3")
    }
    do {
      let path: [RohanIndex] = [
        .index(1),  // heading
        .index(0),  // equation
        .mathIndex(.nucleus),  // nucleus
        .index(1),  // apply node
        .argumentIndex(1),  // second argument
        .index(0),  // text
      ]
      let range = RhTextRange(TextLocation(path, 0))
      let result = documentManager.replaceCharacters(in: range, with: "1+")
      #expect(result.isSuccess)
      let insertionRange = result.success()!
      #expect("\(insertionRange.location)" == "[1â†“,0â†“,nucleus,1â†“,1â‡’,0â†“]:0")
    }
    do {
      let path: [RohanIndex] = [
        .index(2),  // paragraph
        .index(0),  // equation
        .mathIndex(.nucleus),  // nucleus
        .index(0),  // apply node
        .argumentIndex(0),  // first argument
        .index(0),  // apply node
        .argumentIndex(0),  // first argument
        .index(0),
      ]
      let offset = "n".count
      let range = RhTextRange(TextLocation(path, offset))
      let result = documentManager.replaceCharacters(in: range, with: "-k")
      #expect(result.isSuccess)
      let insertionRange = result.success()!
      #expect("\(insertionRange.location)" == "[2â†“,0â†“,nucleus,0â†“,0â‡’,0â†“,0â‡’,0â†“]:1")
    }

    #expect(
      documentManager.prettyPrint() == """
        root
        â”œ paragraph
        â”‚ â”œ text "Sample of nested apply nodes: "
        â”‚ â”” template(doubleText)
        â”‚   â”œ argument #0 (x2)
        â”‚   â”” content
        â”‚     â”œ text "{"
        â”‚     â”œ variable #0
        â”‚     â”‚ â”” template(doubleText)
        â”‚     â”‚   â”œ argument #0 (x2)
        â”‚     â”‚   â”” content
        â”‚     â”‚     â”œ text "{"
        â”‚     â”‚     â”œ variable #0
        â”‚     â”‚     â”‚ â”” text "foxpro"
        â”‚     â”‚     â”œ text " and "
        â”‚     â”‚     â”œ emphasis
        â”‚     â”‚     â”‚ â”” variable #0
        â”‚     â”‚     â”‚   â”” text "foxpro"
        â”‚     â”‚     â”” text "}"
        â”‚     â”œ text " and "
        â”‚     â”œ emphasis
        â”‚     â”‚ â”” variable #0
        â”‚     â”‚   â”” template(doubleText)
        â”‚     â”‚     â”œ argument #0 (x2)
        â”‚     â”‚     â”” content
        â”‚     â”‚       â”œ text "{"
        â”‚     â”‚       â”œ variable #0
        â”‚     â”‚       â”‚ â”” text "foxpro"
        â”‚     â”‚       â”œ text " and "
        â”‚     â”‚       â”œ emphasis
        â”‚     â”‚       â”‚ â”” variable #0
        â”‚     â”‚       â”‚   â”” text "foxpro"
        â”‚     â”‚       â”” text "}"
        â”‚     â”” text "}"
        â”œ heading
        â”‚ â”” equation
        â”‚   â”” nucleus
        â”‚     â”œ text "m+"
        â”‚     â”œ template(complexFraction)
        â”‚     â”‚ â”œ argument #0 (x2)
        â”‚     â”‚ â”œ argument #1 (x2)
        â”‚     â”‚ â”” content
        â”‚     â”‚   â”” fraction
        â”‚     â”‚     â”œ numerator
        â”‚     â”‚     â”‚ â”” fraction
        â”‚     â”‚     â”‚   â”œ numerator
        â”‚     â”‚     â”‚   â”‚ â”œ variable #1
        â”‚     â”‚     â”‚   â”‚ â”‚ â”” text "1+y"
        â”‚     â”‚     â”‚   â”‚ â”” text "+1"
        â”‚     â”‚     â”‚   â”” denominator
        â”‚     â”‚     â”‚     â”œ variable #0
        â”‚     â”‚     â”‚     â”‚ â”” text "x"
        â”‚     â”‚     â”‚     â”” text "+1"
        â”‚     â”‚     â”” denominator
        â”‚     â”‚       â”œ variable #0
        â”‚     â”‚       â”‚ â”” text "x"
        â”‚     â”‚       â”œ text "+"
        â”‚     â”‚       â”œ variable #1
        â”‚     â”‚       â”‚ â”” text "1+y"
        â”‚     â”‚       â”” text "+1"
        â”‚     â”” text "+n"
        â”” paragraph
          â”” equation
            â”” nucleus
              â”” template(bifun)
                â”œ argument #0 (x2)
                â”” content
                  â”œ text "f("
                  â”œ variable #0
                  â”‚ â”” template(bifun)
                  â”‚   â”œ argument #0 (x2)
                  â”‚   â”” content
                  â”‚     â”œ text "f("
                  â”‚     â”œ variable #0
                  â”‚     â”‚ â”” text "n-k+1"
                  â”‚     â”œ text ","
                  â”‚     â”œ variable #0
                  â”‚     â”‚ â”” text "n-k+1"
                  â”‚     â”” text ")"
                  â”œ text ","
                  â”œ variable #0
                  â”‚ â”” template(bifun)
                  â”‚   â”œ argument #0 (x2)
                  â”‚   â”” content
                  â”‚     â”œ text "f("
                  â”‚     â”œ variable #0
                  â”‚     â”‚ â”” text "n-k+1"
                  â”‚     â”œ text ","
                  â”‚     â”œ variable #0
                  â”‚     â”‚ â”” text "n-k+1"
                  â”‚     â”” text ")"
                  â”” text ")"
        """)
  }
}
